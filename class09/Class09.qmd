---
title: "Class 9: Structural Bioinformatics 1"
author: "Chloe Do"
format: pdf
---

## 1. The RCSB Protein Data Bank (PDB)

Protein structures by X-ray crystalography dominate this database. We are skipping Q1-Q3 because the website was too slow for us.

## 2. Visualizing the HIV-1 protease structure

![HIV-Pr structure from 1hsg](1HSG%20-%20ASP25.png)

> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

Because the hydrogen atoms are so small that with this high resolution, we cannot visualize them in the image.

> Q5: There is a critical "conserved" water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have?

The water is located between the ligand and binding site. HOH 308

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain (we recommend "Ball & Stick" for these side-chains). Add this figure to your Quarto document.

> Discussion Topic: Can you think of a way in which indinavir, or even larger ligands and substrates, could enter the binding site?

One way that indinavir or even larger ligands and substrates could enter the binding site is to make the polymers more flexible so that it could allow them to enter. We can also break bonds to make the protein smaller that could allows them to enter.

## 3. Introduction to Bio3D in R

Bio3D is an R package for structural bioinformatics. To use it we need to call it up with the `library()` function

```{r}
library(bio3d)
```

To read a PDB file we can use `read.pdb()`

```{r}
pdb <- read.pdb("1hsg")
pdb
```

The ATOM records of a PDB file are stored in `pdb$atom`

```{r}
head(pdb$atom)
```

> Q7: How many amino acid residues are there in this pdb object?

198

> Q8: Name one of the two non-protein residues?

MK1

> Q9: How many protein chains are in this structure?

2

## 4. Comparative structure analysis of Adenylate Kinase

```{r}
# Install packages in the R console NOT your Rmd/Quarto file

#install.packages("ggrepel")
#install.packages("devtools")
#install.packages("BiocManager")

#BiocManager::install("msa")
#devtools::install_bitbucket("Grantlab/bio3d-view")
```

> Q10. Which of the packages above is found only on BioConductor and not CRAN?

msa

> Q11. Which of the above packages is not found on BioConductor or CRAN?:

bio3d-view

> Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

TRUE

# Compare analysis of Adenylate kinase (ADK)

We will start our analysis with a single PDB id (code from the PDB database): 1AKE

First we get its primary sequence:

```{r}
aa <- get.seq("1ake_a")
aa
```

> Q13. How many amino acids are in this sequence, i.e. how long is this sequence?

214

```{r}
# Blast or hmmer search 

b <- blast.pdb(aa)
```

```{r}
# Plot a summary of search results
hits <- plot(b)

# List out some 'top hits'
head(hits$pdb.id)
```

Use these ADK structures for analysis:

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

Download all these PDB files from the online database...

```{r}
# Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

```{r}
# Align related PDBs
pdbs <- pdbaln(files, fit = TRUE)#, exefile="msa")
pdbs
```

```{r}
# Vector containing PDB codes for figure axis
#ids <- basename.pdb(pdbs$id)

# Draw schematic alignment
#par(mar=c(1,1,1,1))
#plot(pdbs, labels=ids)
```

## Annotate collected PDB structures

```{r}
#anno <- pdb.annotate(ids)
#unique(anno$source)
```

# Jump to PCA

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```

```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
grps.rd <- cutree(hc.rd, k=3)

plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)

```

To visualize the major structural variations in the ensemble the function `mktrj()` can be used to generate a trajectory PDB file by interpolating along a given PC:

```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

Below is embedded animation

![Animation](PC_1.PDB_animate-trajectory.mp4)


